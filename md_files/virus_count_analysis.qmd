---
title: "Virus Count Analysis"
subtitle: "tidied by sean :)"
author: "Ramon Lorenzo"
date: today
format:
  html:
    toc: true
    page-layout: full
    embed-resources: true
    code-fold: true
    code-tools: true
    link-external-newwindow: true
execute:
  warning: false
from: markdown+emoji 
editor_options: 
  chunk_output_type: console
---

```{r}
#| label: load-packages-data

# devtools::install_github("vqv/ggbiplot")
library(ggbiplot)
library(plotly)
library(ggsci)
library(ggpubr)
library(pscl)
library(glmmTMB)
library(performance)
library(emmeans)
library(fitdistrplus)
library(tidyverse)


virus_counts <- read_csv("data/Virus count - R21.csv") |>
  janitor::clean_names(replace=janitor:::mu_to_u) |> 
  mutate(donor = factor(donor),
         image = factor(image),
         virions = as.numeric(as.character(virions)),
         penetrating_virions = as.numeric(as.character(penetrating_virions)),
         percent_of_penetrating_virions = as.numeric(as.character(percent_of_penetrating_virions)))

# making some tactical deletions-- no percent of penetrating greater than 100; no donor 1905; no NA virions

virus_counts <- virus_counts |> 
  filter(donor != "1905") |> 
  filter(percent_of_penetrating_virions < 101) |>
  filter(!is.na(virions))
```

## distribution check

based on some distribution evaluation things, it looks like lognormal is gonna fit our data the best:

```{r}


plotdist(virus_counts$virions, histo = TRUE, demp = TRUE)
descdist(virus_counts$virions, discrete=FALSE, boot=500)
# i guess this is a mostly lognormal distribution??
fnb<-fitdist(virus_counts$virions, "nbinom")
fp<-fitdist(virus_counts$virions, "pois")
plot.legend <- c( "nbinom", "pois")
denscomp(list(fnb,fp), legendtext = plot.legend)
qqcomp(list(fnb,fp), legendtext = plot.legend)
# based on qqplot-- poisson sucks
cdfcomp(list(fnb,fp), legendtext = plot.legend)
ppcomp(list(fnb,fp), legendtext = plot.legend)
# idk what a pp plot is either but im just gonna say poisson has not been killing it here

gofstat(list(fnb,fp))
```


## Initial Modeling

so let's make a lognormal model!

```{r}

initial_model <- lme4::lmer(virions ~ condition*tissue+(1|donor), virus_counts)

plot(check_distribution(initial_model))


# ZERO INflated binomial
zinbm0<-glmmTMB(virions ~ condition*tissue+(1|donor), 
                family="nbinom2",
                ziformula=~1,data = virus_counts)

# negative binomial
zinbm1<-glmmTMB(virions ~ tissue*condition+(1|donor), 
                family="nbinom2",
                data = virus_counts)

# zero inflation, controlling for tissue
zinbm2<-glmmTMB(virions ~ condition*tissue+(1|donor), 
                family="nbinom2",
                ziformula=~tissue,data = virus_counts)

anova(zinbm0,zinbm1,zinbm2)
model_performance(zinbm0)
check_model(zinbm0)
compare_performance(zinbm0,zinbm1,zinbm2)
```

Then we can compare EMMs of our best model, binom0 :

*SEAN:* is binom best here? idk lol... i need to figure out how this works

```{r}

t <- pairs(emmeans(zinbm0, ~ condition))
s <- pairs(emmeans(zinbm0, ~ tissue))
t.s <- pairs(emmeans(zinbm0, ~ tissue | condition))
s.t <- pairs(emmeans(zinbm0, ~ condition | tissue))

p_vals <- rbind(t.s, s.t,adjust="fdr") |>
  as_tibble() |>
  mutate(group = str_split(contrast, pattern = " - ")) |>
  unnest_wider(group, names_sep = "")

p_vals_tissue <- p_vals |>
  filter(condition == ".") |>
  rename("supp" = "tissue") |>
  mutate(p.value = round(p.value, digits= 2)) |>
  mutate(p.signif = case_when(
    p.value > 0.05 ~ 'ns',
    p.value < 0.01 ~ '*'
  ))

p_vals_condition <- p_vals |>
  filter(tissue == ".") |>
  rename("supp" = "condition") |>
  mutate(p.value = round(p.value, digits= 2)) |>
  mutate(p.signif = case_when(
    p.value > 0.05 ~ 'ns',
    p.value < 0.05 ~ '*'
  ))

check_model(zinbm0)


virus_counts |>
  ggplot(aes(x = tissue, y= virions, color = tissue)) +
  geom_boxplot(outlier.shape = NA) +
  geom_point(position = position_jitterdodge(jitter.width = 0.25))+
  scale_y_log10() +
  theme_pubr()+scale_color_npg() +
  facet_wrap(~condition) +
  # need p values on here
  stat_pvalue_manual(p_vals_condition, label = 'p.signif', y.position = c(100))


ggboxplot(virus_counts, x = "condition", 
          y = "virions",
          combine = TRUE,
          color = "tissue", palette = "npg",
          ylab = "virions", 
          add = "jitter",                              # Add dotplot
          add.params = list(binwidth = 0.2))+
  scale_y_log10() +
  #stat_pvalue_manual(p_vals_tissue, label = 'p.value', y.position = c(2.1,1), hide.ns = TRUE) +
  stat_pvalue_manual(p_vals_condition, label = 'p.signif', x = 'supp', y.position = c(200, 200), hide.ns = FALSE) +
  labs(title = 'Comparison of virion count in different tissue samples',
    caption = 'p values computed using pairwise comparisons in emmeans and adjusted by FDR')

  
```

## looking at means

look at some means of viral counts instead of just looking at all of them:

```{r}

mean_virus_counts <-virus_counts %>%
  group_by(condition, tissue, donor) %>%
  summarise(mean_virions = mean(virions)) 

mean_model <- lme4::lmer(log10(mean_virions) ~ condition*tissue+(1|donor), 
                    data = mean_virus_counts)

plot(check_distribution(mean_model))
t <- pairs(emmeans(mean_model, ~ condition))
s <- pairs(emmeans(mean_model, ~ tissue))
t.s <- pairs(emmeans(mean_model, ~ tissue | condition))
s.t <- pairs(emmeans(mean_model, ~ condition | tissue))
rbind(t.s, s.t,adjust="fdr")

# no significance!

check_model(mean_model)
qqnorm(resid(mean_model))
qqline(resid(mean_model))
hist(resid(mean_model))
plot(fitted(mean_model),resid(mean_model))
abline(h=0)

mean_virus_counts %>%
  ggplot(aes(x=condition,y=mean_virions,color=tissue))+
  geom_boxplot(outlier.shape = NA)+
  geom_point(position = position_jitterdodge())+
  theme_pubr()+scale_color_npg()+
  facet_grid(.~tissue, scales = "free")
```

not really seeing any significant differences when we just look at virion counts overall-- is there something we can do to analyze the depths that these virions penetrated?

## Penetrators

```{r}

Penetrators <- virus_counts |>
  dplyr::select(condition, tissue, percent_of_penetrating_virions)

lm_penetrators <- gamlss::gamlss((percent_of_penetrating_virions/100) ~ condition*tissue,
                                 # beta inflated something something
                                 family = gamlss.dist::BEINF(), 
                                 data = Penetrators)

plot(check_distribution(lm_penetrators))

# Check on this:
# binned_residuals(lm_penetrators, residuals = "response")
# check_model(lm_penetrators)

t <- pairs(emmeans(lm_penetrators, ~ condition))
s <- pairs(emmeans(lm_penetrators, ~ tissue))
t.s <- pairs(emmeans(lm_penetrators, ~ tissue | condition))
s.t <- pairs(emmeans(lm_penetrators, ~ condition | tissue))
rbind(t, s, t.s,s.t,adjust="FDR")

p_vals <- rbind(t, s, t.s,s.t,adjust="FDR") |>
  as_tibble() |>
  mutate(group = str_split(contrast, pattern = " - ")) |>
  unnest_wider(group, names_sep = "") |>
  mutate(p.signif = case_when(
    p.value > 0.05 ~ 'ns',
    p.value < 0.05 ~ '*',
    p.value < 0.01 ~ '**',
    p.value < 0.001 ~ '***'
  ))

p_vals_tissue <- p_vals |>
  filter(condition == "." & tissue != '.') |>
  mutate(p.value = round(p.value, digits= 2)) 

p_vals_condition <- p_vals |>
  filter(tissue == "." & condition != '.') |>
  mutate(p.value = round(p.value, digits= 2)) 

```

here we see some significant differences between circumcised and uncircumcised-- specifically in shaft, but maybe in both? Yes definitely-- although there might be something funky about how I'm manipulating p values here by choosing which comparisons I want to make. 

```{r}

Penetrators |>
  ggplot(aes(x = condition, y= percent_of_penetrating_virions, color = condition)) +
  geom_boxplot(outlier.shape = NA) +
  geom_point(position = position_jitterdodge(jitter.width = 0.25))+
  theme_pubr()+scale_color_npg() +
  stat_pvalue_manual(p_vals[1,], label = 'p.signif', y.position = c(110)) +
  labs(title = "Uncircumcised samples are more likely to have higher numbers of penetrating virions") 


Penetrators |>
  ggplot(aes(x = condition, y= percent_of_penetrating_virions, color = condition)) +
  geom_boxplot(outlier.shape = NA) +
  geom_point(position = position_jitterdodge(jitter.width = 0.25))+
  theme_pubr()+scale_color_npg() +
  facet_wrap(~tissue) +
  stat_pvalue_manual(p_vals_tissue, label = 'p.signif', y.position = c(120,120))

```

Ok this is cool... but there are a lot of 100%s and 0%s in either case. This might be worth investigating-- who is at these extremes?

lets go back to basic EDA-- what does our virion number data even look like

```{r}
#| label: investigate-virion-counts

virus_counts |>
  ggplot(aes(x = percent_of_penetrating_virions, fill = condition)) +
  geom_histogram(bins = 100) +
  facet_grid(condition~tissue) +
  theme_pubr()+scale_color_npg()

```

ok right this is why we fit with a negative binomial. I am ok with this i guess-- it's not really like we can just throw out the zeros...

But what if we JUST look at the zeros?
no this doesnt make sense. unless maybe it does

Here, let's look at the percent of each category that have ZERO penetration (not sure if i can do this-- ask ramon)

```{r}
#| label: zeros

totals <- virus_counts |>
  dplyr::group_by(tissue, condition) |>
  dplyr::summarize(totals = n())

virus_counts |>
  filter(percent_of_penetrating_virions == 0 & virions != 0) |>
  dplyr::group_by(tissue, condition) |>
  dplyr::summarize(counts = n()) |>
  left_join(y = totals, by = c('tissue', 'condition')) |>
  mutate(percent_rejected = (counts*100)/totals) |>
  ggplot(aes(x = tissue, y = percent_rejected, fill = condition)) +
  geom_col(position = 'dodge', width = 0.6)+
  theme_pubr()+scale_color_npg()
```

this is cool until you filter out the ones that actually didn't have any virions in them ... hmmm.

```{r}
#| label: explore-unpenetrated

rejected_virions <- virus_counts |>
  mutate(rejected_virions = virions - penetrating_virions,
         rejected_ratio = rejected_virions/penetrating_virions)

# what if i plot counts of rejected virions? does this make sense? 

rejected_virions |>
  filter(virions != 0 & penetrating_virions != 0) |>
  ggplot(aes(x = tissue, y = rejected_ratio, color = condition)) +
  geom_boxplot(outlier.shape = NA) +
  geom_point(position = position_jitterdodge(jitter.width = 0.2))
```

yeah ok i think what im doing here is garBAGE but the model should be good enough because that takes into account the fact that we're gonna have zeros or whatever and also its giving me p values so. fun investigation but nothing incredibly shocking here. we should get same results doing percent penetrating and percent rejected bc they're proxies for one another.



```{r}
qqnorm(resid(lm_penetrators))
qqline(resid(lm_penetrators))
hist(resid(lm_penetrators))
plot(fitted(lm_penetrators),resid(lm_penetrators))
abline(h=0)

# maybe see higher of pct of penetrating virions in uncircumcised?
virus_counts%>%
  ggplot(aes(x=condition,y=percent_of_penetrating_virions,color=condition))+
  geom_boxplot(outlier.shape = NA)+
  geom_point(position = position_jitterdodge())+
  theme_pubr()+scale_color_npg()+facet_grid(.~tissue,scales = "free")


mean_penetrators <-virus_counts %>%
  group_by(condition, tissue, donor) %>%
  summarise(mean_percent_of_penetrating_virions = mean(percent_of_penetrating_virions)) 
```

## Depth

analysis of how far the virions penetrated -- doesn't really seem to be a difference here

```{r}

Depth<-virus_counts[,c(1:4,9:59)]

Depth<-Depth%>%
  dplyr::rename("x9" = "penetration_depths_um") %>%
  pivot_longer(x9:x59,
               names_to = "particle",
               values_to = "penetration_depth") |>
  dplyr::select(!particle) |>
  drop_na(penetration_depth) |>
  mutate(penetration_depth = as.numeric(as.character(penetration_depth)))

# just take a peek!

Depth |>
  ggplot(aes(y = tissue, color = condition, x = penetration_depth)) +
  geom_point(position = position_jitterdodge(jitter.width = 0.2), size = 0.1)+
  geom_boxplot(outlier.shape = NA, fill = NA)+
  theme_pubr()+scale_color_npg() +
  labs(title = 'Penetration Depth Distributions are Similar for Each Group')



mean_depth <- Depth %>%
  group_by(condition, tissue, donor) %>%
  summarise(mean_depth = mean(penetration_depth))


mean_depth%>%
  ggplot(aes(x=condition,y=mean_depth,color=tissue))+
  geom_boxplot(outlier.shape = NA)+
  geom_point(position = position_jitterdodge())+
  theme_pubr()+scale_color_npg()+
  facet_grid(.~tissue,scales = "free")

fl<-fitdist(mean_depth$mean_depth, "lnorm")
fn<-fitdist(mean_depth$mean_depth, "norm")
fg<-fitdist(mean_depth$mean_depth, "gamma")
plot.legend <- c("normal", "gamma", "lognorm")
denscomp(list(fn,fg,fl), legendtext = plot.legend)
qqcomp(list(fn,fg,fl), legendtext = plot.legend)
cdfcomp(list(fn,fg,fl), legendtext = plot.legend)
ppcomp(list(fn,fg,fl), legendtext = plot.legend)
gofstat(list(fn,fg,fl))

# I don't know if you actually need the random effects term if you're doing mean depth here
lm_mean_depth <- lme4::lmer(log10(mean_depth) ~ condition*tissue +(1|donor), data = mean_depth)
plot(check_distribution(lm_mean_depth))

binned_residuals(lm_mean_depth)
check_model(lm_mean_depth)

t <- pairs(emmeans(lm_mean_depth, ~ condition))
s <- pairs(emmeans(lm_mean_depth, ~ tissue))
t.s <- pairs(emmeans(lm_mean_depth, ~ tissue | condition))
s.t <- pairs(emmeans(lm_mean_depth, ~ condition | tissue))
rbind(t.s,s.t,adjust="FDR")

# try again with random effects but without mean

fl<-fitdist(Depth$penetration_depth, "lnorm")
fn<-fitdist(Depth$penetration_depth, "norm")
fg<-fitdist(Depth$penetration_depth, "gamma")
plot.legend <- c("normal", "gamma", "lognorm")
denscomp(list(fn,fg,fl), legendtext = plot.legend)
qqcomp(list(fn,fg,fl), legendtext = plot.legend)
cdfcomp(list(fn,fg,fl), legendtext = plot.legend)
ppcomp(list(fn,fg,fl), legendtext = plot.legend)
gofstat(list(fn,fg,fl))

lm_depth <- lme4::lmer(log10(penetration_depth) ~ condition*tissue +(1|donor), data = Depth)
plot(check_distribution(lm_depth))

binned_residuals(lm_depth)
check_model(lm_depth)

t <- pairs(emmeans(lm_depth, ~ condition))
s <- pairs(emmeans(lm_depth, ~ tissue))
t.s <- pairs(emmeans(lm_depth, ~ tissue | condition))
s.t <- pairs(emmeans(lm_depth, ~ condition | tissue))
rbind(t.s,s.t,adjust="FDR")


qqnorm(resid(lm_depth))
qqline(resid(lm_depth))
hist(resid(lm_depth))
plot(fitted(lm_depth),resid(lm_depth))
abline(h=0)


Depth |>
  ggplot(aes(color = condition, x = penetration_depth)) +
  geom_freqpoly() +
  facet_wrap(~tissue) +
  theme_pubr()+scale_color_npg() 
```

no significant p values here.. but also a pretty bad fit of the data with the model

i just can't convince myself that there is a difference. i got nothing <3 hey siri play not strong enough by boygenius
